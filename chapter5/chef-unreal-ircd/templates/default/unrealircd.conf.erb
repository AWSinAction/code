/*
 * unrealircd.conf
 *
 * Most of the options here are documented by the Unreal online documentation,
 * available at http://www.unrealircd.com/files/docs/unreal32docs.html. Please
 * refer to their guide for information about what each option does.
 *
 * Every option on that page should be able to be specified here. Some options
 * are not specified explicitly in this config, but can still be set -- just
 * try setting the attribute on your node. If that still doesn't work, please
 * open an issue on https://github.com/fhats/chef-unreal-ircd. Pull requests
 * and patches will be gladly accepted.
 *
 * This file was generated by Chef. Any changes you make will be overwritten
 * by the next Chef run.
 *
 */

<% node['unreal']['config']['modules'].each do |irc_module| %>
loadmodule "src/modules/<%= irc_module %>.so";
<% end %>
<% if node['unreal']['enable_sanick'] %>loadmodule "src/modules/m_sanick.so";<% end %>

<% if node['unreal']['config']['additional_config_files'].length > 0 %>include "unrealircd.conf.d/*"<% end %>
<% if node['unreal']['config']['use_default_spamfilter'] %>include "spamfilter.conf";<% end %>

me {
	name "<%= node['unreal']['config']['me']['name'] %>";
	info "<%= node['unreal']['config']['me']['info'] %>";
	numeric <%= node['unreal']['config']['me']['numeric'] %>;
};

admin {
<% node['unreal']['config']['admin'].each do |admin_line| %>
	"<%= admin_line %>";
<% end %>
};

<% node['unreal']['config']['class'].each do |class_name, class_config| %>
class   <%= class_name %> {
	<% class_config.each do |option, value| %>
	<%= option %> <%= value %>;
	<% end %>
};
<% end %>

<% node['unreal']['config']['allow'].each do |allow_block| %>
allow {
	<% allow_block.each do |option, value| %>
	<%= option %> <%= value %>;
	<% end %>
};
<% end %>

<% node['unreal']['config']['listen'].each do |listen_config| %>
listen <%= listen_config['ip'] %>:<%= listen_config['port'] %> {
	options
	{<% listen_config['options'].each do |option| %>
		<%= option %>;<% end %>
	};
};
<% end %>

<% node['unreal']['config']['oper'].each do |oper_name, oper_config| %>
oper <%= oper_name %> {
	class <%= oper_config['class'] %>;
	flags {<% oper_config['flags'].each do |flag| %>
		<%= flag %>;<% end %>
	};
	from {<% oper_config['from'].each do |hostmask| %>
		userhost <%= hostmask %>;<% end %>
	};
	<%= optional_directive("maxlogins", oper_config, "maxlogins") %>
	<%= optional_directive("modes", oper_config, "modes") %>
	password <%= format_password(oper_config['password']) %>;
	<%= optional_directive("require-modes", oper_config, "require-modes") %>
	<%= optional_directive("snomask", oper_config, "snomask") %>
	<%= optional_directive("swhois", oper_config, "swhois", quoted=true) %>
};
<% end %>

<% if node['unreal']['config']['drpass'] && %w[die restart].all? { |drkind| node['unreal']['config']['drpass'].has_key?(drkind) } %>
drpass {
	die <%= format_password(node['unreal']['config']['drpass']['die']) %>;
	restart <%= format_password(node['unreal']['config']['drpass']['restart']) %>;
};
<% end %>

<% node['unreal']['config']['log'].each do |logfile, options| %>
log "<%= logfile %>" {
	flags {<% options['flags'].each do |flag| %>
		<%= flag %>;<% end %>
	};
	<%= optional_directive("maxsize", options, "maxsize") %>
};
<% end %>

<% node['unreal']['config']['tld'].each do |options| %>
tld {
	mask "<%= options['mask'] %>";
	motd "<%= options['motd'] %>";
	rules "<%= options['rules'] %>";
	<%= optional_directive("shortmotd", options, "shortmotd", quoted=true) %>
	<%= optional_directive("opermotd", options, "opermotd", quoted=true) %>
	<%= optional_directive("botmotd", options, "botmotd", quoted=true) %>
	<%= optional_directive("channel", options, "channel", quoted=true) %>
	<% if options.has_key?("options") %>
	options {<% options['options'].each do |option| %>
		<%= option %>;<% end %>
	};
	<% end %>
};
<% end %>

<% node['unreal']['config']['bans']['nicks'].each do |ban| %>
ban nick {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
};
<% end %>
<% node['unreal']['config']['bans']['users'].each do |ban| %>
ban user {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
};
<% end %>
<% node['unreal']['config']['bans']['ips'].each do |ban| %>
ban ip {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
};
<% end %>
<% node['unreal']['config']['bans']['servers'].each do |ban| %>
ban server {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
};
<% end %>
<% node['unreal']['config']['bans']['realnames'].each do |ban| %>
ban realname {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
};
<% end %>
<% node['unreal']['config']['bans']['versions'].each do |ban| %>
ban version {
	mask "<%= ban['mask'] %>";
	reason "<%= ban['reason'] %>";
	action <%= ban['action'] %>;
};
<% end %>

<% node['unreal']['config']['exceptions']['bans'].each do |ban| %>
except ban {
	mask "<%= ban['mask'] %>";
};
<% end %>
<% node['unreal']['config']['exceptions']['tkls'].each do |ban| %>
except tkl {
	mask "<%= ban['mask'] %>";
	type {<% ban['types'].each do |type| %>
		<%= type %>;<% end %>
	};
};
<% end %>
<% node['unreal']['config']['exceptions']['throttles'].each do |ban| %>
except throttle {
	mask "<%= ban['mask'] %>";
};
<% end %>

<% node['unreal']['config']['deny']['dcc'].each do |deny| %>
deny dcc {
	filename "<%= deny['filename'] %>";
	reason "<%= deny['reason'] %>";
	<%= optional_directive("soft", deny, "soft") %>
};
<% end %>
<% node['unreal']['config']['deny']['version'].each do |deny| %>
deny version {
	mask "<%= deny['mask'] %>";
	version "<%= deny['version'] %>";
	flags "<%= deny['flags'] %>";
};
<% end %>
<% node['unreal']['config']['deny']['link'].each do |deny| %>
deny link {
	mask "<%= deny['mask'] %>";
	rule "<%= deny['rule'] %>";
	type "<%= deny['type'] %>";
};
<% end %>
<% node['unreal']['config']['deny']['channel'].each do |deny| %>
deny channel {
	channel "<%= deny['channel'] %>";
	reason "<%= deny['reason'] %>";
	<%= optional_directive("redirect", deny, "redirect") %>
	<%= optional_directive("warn", deny, "warn") %>
};
<% end %>

<% node['unreal']['config']['allows']['channel'].each do |allow| %>
allow channel {
	channel "<%= allow['channel'] %>";
};
<% end %>
<% node['unreal']['config']['allows']['dcc'].each do |allow| %>
allow dcc {
	filename "<%= allow['filename'] %>";
	<%= optional_directive("soft", allow, "soft") %>
};
<% end %>

<% node['unreal']['config']['vhosts'].each do |vhost| %>
vhost {
	vhost <%= vhost['vhost'] %>;
	from {<% vhost['from'].each do |hostmask| %>
		userhost <%= hostmask %>;<% end %>
	};
	login <%= vhost['login'] %>;
	password <%= format_password(vhost['password']) %>;
	<%= optional_directive("swhois", vhost, "swhois", quoted=true) %>
<% end %>
<% node['unreal']['config']['badword'].each do |badword| %>
badword <%= badword['type'] %> {
	word <%= badword['word'] %>;
	replace <%= badword['replace'] %>;
	<%= optional_directive("action", badword, "action") %>
};
<% end %>

ulines {<% node['unreal']['config']['ulines'].each do |uline| %>
	<%= uline %>;<% end %>
};

<% node['unreal']['config']['link'].each do |server, link_options| %>
link <%= server %> {
	username <%= link_options['username'] %>;
	hostname <%= link_options['hostname'] %>;
	<%= optional_directive("bind-ip", link_options, "bind-ip") %>
	port <%= link_options['port'] %>;
	password-connect <%= link_options['password-connect'] %>;
	password-receive <%= link_options['password-receive'] %>;
	<%= optional_directive("hub", link_options, "hub") %>
	<%= optional_directive("leaf", link_options, "leaf") %>
	<%= optional_directive("leafdepth", link_options, "leafdepth") %>
	class <%= link_options['class'] %>;
	options {<% link_options['options'].each do |option| %>
		<%= option %>;<% end %>
	};
};
<% end %>

# Alias blocks are currently unsupported by chef-unreal-ircd since they can get
# rather complex and offer a lot of flexibility.
#
# To implement aliases, you should template your own alias configurations and
# include them using "additional_config_files". Contributions to make dealing
# with aliases simpler are very welcome!
#
# If you just need to leverage one of the included alias sets for e.g. services
# just use the alias_includes attribute.
<% node['unreal']['config']['alias_includes'].each do |alias_include| %>
include aliases/<%= alias_include %>;<% end %>

<% if node['unreal']['config']['help'].length > 0 %>
help {<% node['unreal']['config']['help'].each do |help_line| %>
	"<%= help_line %>";<% end %>
};
<% end %>
<% if node['unreal']['config']['official-channels'].length > 0 %>
official-channels {<% node['unreal']['config']['official-channels'].each do |channel, topic| %>
	"<%= channel %>" { topic "<%= topic %>"; };<% end %>
};
<% end %>
<% node['unreal']['config']['spamfilter'].each do |spamfilter| %>
spamfilter {
	regex <%= spamfilter['regex'] %>;
	target { <% spamfilter['targets'].each do |target| %><%= target %>; <% end %> };
	action <%= spamfilter['action'] %>;
	<%= optional_directive("reason", spamfilter, "reason") %>
	<%= optional_directive("ban-time", spamfilter, "ban-time") %>
};
<% end %>

<% node['unreal']['config']['cgiirc'].each do |cgiirc| %>
cgiirc {
	type <%= cgiirc['type'] %>;
	<%= optional_directive("username", cgiirc, "username") %>
	hostname <%= cgiirc['hostname'] %>;
	<%= optional_directive("password", cgiirc, "password") %>
};
<% end %>

set {
	cloak-keys { <% node['unreal']['config']['set']['cloak-keys'].each do |key| %>"<%= key %>"; <% end %> };
	kline-address "<%= node['unreal']['config']['set']['kline-address'] %>";
	services-server "<%= node['unreal']['config']['set']['services-server'] %>";
	<%= optional_directive('allow-userhost-change', node['unreal']['config']['set'], 'allow-userhost-change', quoted=true) %>
	anti-flood {<% node['unreal']['config']['set']['anti-flood'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('anti-spam-quit-message-time', node['unreal']['config']['set'], 'anti-spam-quit-message-time', quoted=true) %>
	<%= optional_directive('auto-join', node['unreal']['config']['set'], 'auto-join', quoted=true) %>
	<%= optional_directive('ban-version-tkl-time', node['unreal']['config']['set'], 'ban-version-tkl-time', quoted=true) %>
	<%= optional_directive('channel-command-prefix', node['unreal']['config']['set'], 'channel-command-prefix', quoted=true) %>
	<%= optional_directive('check-target-nick-bans', node['unreal']['config']['set'], 'check-target-nick-bans', quoted=true) %>
	<%= optional_directive('default-bantime', node['unreal']['config']['set'], 'default-bantime', quoted=true) %>
	<%= optional_directive('default-ipv6-clone-mask', node['unreal']['config']['set'], 'default-ipv6-clone-mask', quoted=true) %>
	<%= optional_directive('default-server', node['unreal']['config']['set'], 'default-server', quoted=true) %>
	dns {<% node['unreal']['config']['set']['dns'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('gline-address', node['unreal']['config']['set'], 'gline-address', quoted=true) %>
	<%= optional_directive('help-channel', node['unreal']['config']['set'], 'help-channel', quoted=true) %>
	<%= optional_directive('hiddenhost-prefix', node['unreal']['config']['set'], 'hiddenhost-prefix', quoted=true) %>
	hosts {<% node['unreal']['config']['set']['hosts'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	ident {<% node['unreal']['config']['set']['ident'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('level-on-join', node['unreal']['config']['set'], 'level-on-join', quoted=true) %>
	<%= optional_directive('maxbanlength', node['unreal']['config']['set'], 'maxbanlength', quoted=true) %>
	<%= optional_directive('maxbans', node['unreal']['config']['set'], 'maxbans', quoted=true) %>
	<%= optional_directive('maxchannelsperuser', node['unreal']['config']['set'], 'maxchannelsperuser', quoted=true) %>
	<%= optional_directive('maxdccallow', node['unreal']['config']['set'], 'maxdccallow', quoted=true) %>
	<%= optional_directive('modef-default-unsettime', node['unreal']['config']['set'], 'modef-default-unsettime', quoted=true) %>
	<%= optional_directive('modef-max-unsettime', node['unreal']['config']['set'], 'modef-max-unsettime', quoted=true) %>
	<%= optional_directive('modes-on-connect', node['unreal']['config']['set'], 'modes-on-connect', quoted=true) %>
	<%= optional_directive('modes-on-join', node['unreal']['config']['set'], 'modes-on-join', quoted=true) %>
	<%= optional_directive('modes-on-oper', node['unreal']['config']['set'], 'modes-on-oper', quoted=true) %>
	<%= optional_directive('network-name', node['unreal']['config']['set'], 'network-name', quoted=true) %>
	nopost {<% node['unreal']['config']['set']['nopost'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('oper-auto-join', node['unreal']['config']['set'], 'oper-auto-join', quoted=true) %>
	<% if node['unreal']['config']['set']['oper-only-stats'].kind_of? String %>
	oper-only-stats "<%= node['unreal']['config']['set']['oper-only-stats'] %>";
	<% else %>
	oper-only-stats {<% node['unreal']['config']['set']['oper-only-stats'].each do |stat| %><%=stat%>; <% end %> };
	<% end %>
	options {<% node['unreal']['config']['set']['options'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('ping-cookie', node['unreal']['config']['set'], 'ping-cookie', quoted=true) %>
	<%= optional_directive('pingpong-warning', node['unreal']['config']['set'], 'pingpong-warning', quoted=true) %>
	<%= optional_directive('prefix-quit', node['unreal']['config']['set'], 'prefix-quit', quoted=true) %>
	<%= optional_directive('restrict-channelmodes', node['unreal']['config']['set'], 'restrict-channelmodes', quoted=true) %>
	<%= optional_directive('restrict-extendedbans', node['unreal']['config']['set'], 'restrict-extendedbans', quoted=true) %>
	<%= optional_directive('restrict-usermodes', node['unreal']['config']['set'], 'restrict-usermodes', quoted=true) %>
	<%= optional_directive('sasl-server', node['unreal']['config']['set'], 'sasl-server', quoted=true) %>
	<%= optional_directive('silence-limit', node['unreal']['config']['set'], 'silence-limit', quoted=true) %>
	<%= optional_directive('snomask-on-connect', node['unreal']['config']['set'], 'snomask-on-connect', quoted=true) %>
	<%= optional_directive('snomask-on-oper', node['unreal']['config']['set'], 'snomask-on-oper', quoted=true) %>
	spamfilter {<% node['unreal']['config']['set']['spamfilter'].each do |k,v| %>
		<%= k %> "<%= v %>";<% end %>
	};
	ssl {
		<%= optional_directive('egd', node['unreal']['config']['set']['ssl'], 'egd', quoted=true) %>
		<%= optional_directive('certificate', node['unreal']['config']['set']['ssl'], 'certificate', quoted=true) %>
		<%= optional_directive('key', node['unreal']['config']['set']['ssl'], 'key', quoted=true) %>
		<%= optional_directive('trusted-ca-file', node['unreal']['config']['set']['ssl'], 'trusted-ca-file', quoted=true) %>
		<%= optional_directive('server-cipher-list', node['unreal']['config']['set']['ssl'], 'server-cipher-list', quoted=true) %>
		<%= optional_directive('renegotiate-bytes', node['unreal']['config']['set']['ssl'], 'renegotiate-bytes', quoted=true) %>
		<%= optional_directive('renegotiate-timeout', node['unreal']['config']['set']['ssl'], 'renegotiate-timeout', quoted=true) %>
		<% if node['unreal']['config']['set']['ssl'].has_key?('options') %>
		options {<% node['unreal']['config']['set']['ssl']['options'].each do |option| %>
			<%= option %>;<% end %>
		};
		<% end %>
	};
	<%= optional_directive('static-part', node['unreal']['config']['set'], 'static-part', quoted=true) %>
	<%= optional_directive('static-quit', node['unreal']['config']['set'], 'static-quit', quoted=true) %>
	<%= optional_directive('stats-server', node['unreal']['config']['set'], 'stats-server', quoted=true) %>
	throttle {<% node['unreal']['config']['set']['throttle'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	timesynch {<% node['unreal']['config']['set']['timesynch'].each do |k,v| %>
		<%= k %> <%= v %>;<% end %>
	};
	<%= optional_directive('watch-away-notification', node['unreal']['config']['set'], 'watch-away-notification', quoted=true) %>
	<%= optional_directive('who-limit', node['unreal']['config']['set'], 'who-limit', quoted=true) %>
};

files {
	<%= optional_directive("botmotd", node['unreal']['config']['files'], "botmotd", quoted=true) %>
	<%= optional_directive("motd", node['unreal']['config']['files'], "motd", quoted=true) %>
	<%= optional_directive("opermotd", node['unreal']['config']['files'], "opermotd", quoted=true) %>
	<%= optional_directive("rules", node['unreal']['config']['files'], "rules", quoted=true) %>
	<%= optional_directive("shortmotd", node['unreal']['config']['files'], "shortmotd", quoted=true) %>
	<%= optional_directive("svsmotd", node['unreal']['config']['files'], "svsmotd", quoted=true) %>

	<%= optional_directive("pidfile", node['unreal']['config']['files'], "pidfile", quoted=true) %>
	<%= optional_directive("tunefile", node['unreal']['config']['files'], "tunefile", quoted=true) %>
};

/*
 * Problems or need more help?
 * 1) www.vulnscan.org/UnrealIRCd/unreal32docs.html
 * 2) www.vulnscan.org/UnrealIRCd/faq/ <- contains 80% of your questions!
 * 3) If you still have problems you can go irc.unrealircd.org #unreal-support,
 *    note that we require you to READ THE DOCUMENTATION and FAQ first!
 */
