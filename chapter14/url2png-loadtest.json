{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS in Action: chapter 14 (URL2PNG load test)",
	"Parameters": {
		"KeyName": {
			"Description": "Key Pair name",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "mykey"
		},
		"ApplicationID": {
			"Description": "A unique identifier for your application.",
			"Type": "String",
			"AllowedPattern": "[A-Za-z0-9\\-]+",
			"ConstraintDescription": "Only letters, digits or dash allowed."
		}
	},
	"Mappings": {
		"EC2RegionMap": {
			"ap-northeast-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-cbf90ecb"},
			"ap-southeast-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-68d8e93a"},
			"ap-southeast-2": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-fd9cecc7"},
			"eu-central-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-a8221fb5"},
			"eu-west-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-a10897d6"},
			"sa-east-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-b52890a8"},
			"us-east-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-1ecae776"},
			"us-west-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-d114f295"},
			"us-west-2": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-e7527ed7"}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "172.31.0.0/16",
				"EnableDnsHostnames": "true"
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {"Ref": "VPC"},
				"InternetGatewayId": {"Ref": "InternetGateway"}
			}
		},
		"SubnetA": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
				"CidrBlock": "172.31.38.0/24",
				"VpcId": {"Ref": "VPC"}
			}
		},
		"SubnetB": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
				"CidrBlock": "172.31.37.0/24",
				"VpcId": {"Ref": "VPC"}
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {"Ref": "VPC"}
			}
		},
		"RouteTableAssociationA": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetA"},
				"RouteTableId": {"Ref": "RouteTable"}
			}
		},
		"RouteTableAssociationB": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetB"},
				"RouteTableId": {"Ref": "RouteTable"}
			}
		},
		"RoutePublicNATToInternet": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {"Ref": "RouteTable"},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {"Ref": "InternetGateway"}
			},
			"DependsOn": "VPCGatewayAttachment"
		},
		"NetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {"Ref": "VPC"}
			}
		},
		"SubnetNetworkAclAssociationA": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetA"},
				"NetworkAclId": {"Ref": "NetworkAcl"}
			}
		},
		"SubnetNetworkAclAssociationB": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {"Ref": "SubnetB"},
				"NetworkAclId": {"Ref": "NetworkAcl"}
			}
		},
		"NetworkAclEntryIngress": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {"Ref": "NetworkAcl"},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"NetworkAclEntryEgress": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {"Ref": "NetworkAcl"},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "awsinaction-sg",
				"VpcId": {"Ref": "VPC"},
				"SecurityGroupIngress": [{
					"CidrIp": "0.0.0.0/0",
					"FromPort": 22,
					"IpProtocol": "tcp",
					"ToPort": 22
				}]
			}
		},
		"IamRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": ["ec2.amazonaws.com"]
							},
							"Action": ["sts:AssumeRole"]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "root",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect" : "Allow",
									"Action" : ["s3:*"],
									"Resource" : [
										{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ApplicationID"} ,"/*"]]}
									]
								},
								{
									"Effect" : "Allow",
									"Action" : ["sqs:*"],
									"Resource" : [
										{"Fn::Join": ["", ["arn:aws:sqs:",  {"Ref": "AWS::Region"}, ":*:", {"Fn::GetAtt": ["SQSQueue", "QueueName"]}]]}
									]
								}
							]
						}
					}
				]
			}
		},
		"IamInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{"Ref": "IamRole"}]
			}
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {"Ref": "ApplicationID"},
				"WebsiteConfiguration": {
					"IndexDocument": "index.html"
				}
			}
		},
		"SQSQueue" : {
			"Type" : "AWS::SQS::Queue",
			"Properties" : {
				"QueueName": "url2png"
			}
		},
		"LaunchConfiguration": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
				"InstanceType": "t2.micro",
				"SecurityGroups": [{"Ref": "SecurityGroup"}],
				"KeyName": {"Ref": "KeyName"},
				"AssociatePublicIpAddress": true,
				"IamInstanceProfile": {"Ref": "IamInstanceProfile"},
				"UserData": {"Fn::Base64": {"Fn::Join": ["", [
					"#!/bin/bash -ex\n",
					"yum update -y aws-cfn-bootstrap\n",
					"curl -sL https://rpm.nodesource.com/setup | bash -\n",
					"yum install -y nodejs\n",
					"wget https://github.com/AWSinAction/code/archive/master.zip\n",
					"unzip master.zip\n",
					"cd code-master/chapter12/url2png/\n",
					"npm install\n",
					"echo \" {\\\"QueueUrl\\\": \\\"", {"Ref": "SQSQueue"},"\\\", \\\"Bucket\\\": \\\"", {"Ref": "ApplicationID"}, "\\\"} \" > config.json \n",
					"node worker.js\n"
				]]}}
			}
		},
		"AutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"LaunchConfigurationName": {"Ref": "LaunchConfiguration"},
				"MinSize": "1",
				"MaxSize": "2",
				"DesiredCapacity": "1",
				"Cooldown": "60",
				"HealthCheckGracePeriod": "120",
				"HealthCheckType": "EC2",
				"VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
				"Tags": [{
					"PropagateAtLaunch": true,
					"Value": "url2png-consumer",
					"Key": "Name"
				}]
			},
			"DependsOn": "VPCGatewayAttachment"
		},
		"ScalingUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
				"Cooldown": "60",
				"ScalingAdjustment": "1"
			}
		},
		"HighQueueAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Sum",
				"Threshold": "5",
				"AlarmDescription": "Alarm if queue length is higher than 5.",
				"Period": "300",
				"AlarmActions": [{"Ref": "ScalingUpPolicy"}],
				"Namespace": "AWS/SQS",
				"Dimensions": [{
					"Name": "QueueName",
					"Value" : {"Fn::GetAtt": ["SQSQueue", "QueueName"]}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "ApproximateNumberOfMessagesVisible"
			}
		},
		"ScalingDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
				"Cooldown": "60",
				"ScalingAdjustment": "-1"
			}
		},
		"LowQueueAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Sum",
				"Threshold": "5",
				"AlarmDescription": "Alarm if queue length is lower than 5.",
				"Period": "300",
				"AlarmActions": [{"Ref": "ScalingDownPolicy"}],
				"Namespace": "AWS/SQS",
				"Dimensions": [{
					"Name": "QueueName",
					"Value" : { "Fn::GetAtt" : ["SQSQueue", "QueueName"] }
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "ApproximateNumberOfMessagesVisible"
			}
		},
		"LoadTestServer": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
				"InstanceType": "t2.micro",
				"KeyName": {"Ref": "KeyName"},
				"IamInstanceProfile": {"Ref": "IamInstanceProfile"},
				"UserData": {"Fn::Base64": {"Fn::Join": ["", [
					"#!/bin/bash -ex\n",
					"for i in `seq 1 25`;\n",
					"do\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.google.com\\\", \\\"url\\\": \\\"http://www.google.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.youtube.com\\\", \\\"url\\\": \\\"http://www.youtube.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.amazon.com\\\", \\\"url\\\": \\\"http://www.amazon.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.twitter.com\\\", \\\"url\\\": \\\"http://www.twitter.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.linkedin.com\\\", \\\"url\\\": \\\"http://www.linkedin.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.ebay.com\\\", \\\"url\\\": \\\"http://www.ebay.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.instagram.com\\\", \\\"url\\\": \\\"http://www.instagram.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.reddit.com\\\", \\\"url\\\": \\\"http://www.reddit.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.pinterest.com\\\", \\\"url\\\": \\\"http://www.pinterest.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"aws sqs send-message --queue-url ", {"Ref": "SQSQueue"} ," --message-body \"{\\\"id\\\": \\\"$i.www.wordpress.com\\\", \\\"url\\\": \\\"http://www.wordpress.com\\\"}\" --region ", {"Ref": "AWS::Region"}, "\n",
					"done\n"
				]]}},
				"Tags": [
					{
						"Key": "Name",
						"Value": "url2png-loadtest"
					}
				],
				"NetworkInterfaces": [{
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{"Ref": "SecurityGroup"}],
					"SubnetId": {"Ref": "SubnetA"}
				}]
			},
			"DependsOn": "VPCGatewayAttachment"
		}
	}
}
